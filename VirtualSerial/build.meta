import java.io.File;

import de.m_marvin.metabuild.core.tasks.FileTask;
import de.m_marvin.metabuild.core.tasks.ZipTask;
import de.m_marvin.metabuild.core.tasks.FileTask.Action;
import de.m_marvin.metabuild.cpp.script.CppMultiTargetBuildScript;
import de.m_marvin.metabuild.maven.Maven;
import de.m_marvin.metabuild.maven.tasks.MavenPublishTask;
import de.m_marvin.metabuild.maven.tasks.MavenResolveTask;
import de.m_marvin.metabuild.maven.types.Repository;
import de.m_marvin.metabuild.maven.types.Repository.Credentials;

public class Buildfile extends CppMultiTargetBuildScript {

	boolean debugging = false; // set to true to compile with debug info
	
	String version = "1.0";
	
	public ZipTask driverZipWinAMD64;
	
	@Override
	public void init() {
		
		projectName = "virtualserial";

		driverZipWinAMD64 = new ZipTask("driverZipWinAMD64");
		driverZipWinAMD64.group = "platformPackaging";
		driverZipWinAMD64.entries.put(new File("../VCOM/x64/Release/VCOM"), "");
		driverZipWinAMD64.archive = new File("build/WinAMD64/bin/libvirtualserial_x64-driver.zip");
		
		var target = makeTarget("WinAMD64", "libvirtualserial_x64.dll");
		target.compileCpp.compiler = target.linkCpp.linker = "win-amd-64-g++";
		target.compileCpp.includes.add(new File("../VCOM"));
		target.compileCpp.define("PLATFORM_WIN");
		if (debugging) target.compileCpp.options.add("-g");
		target.linkCpp.options.add("-shared");
		target.linkCpp.options.add("-static-libgcc");
		target.linkCpp.options.add("-static-libstdc++");

		driverZipWinAMD64.dependencyOf(target.build);
		
		super.init();
		
	}
	
	@Override
	public void repositories(MavenResolveTask dependencies, String config) {
		
		dependencies.repository(Maven.mavenLocal());
		
		dependencies.repository(new Repository(
				"GHP [SerialPortAccess]", 
				"https://maven.pkg.github.com/m-marvin/library-serialportaccess",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));
		
	}
	
	@Override
	public void dependencies(MavenResolveTask dependencies, String config) {
		
		dependencies.implementation("de.m_marvin.serialutility:serialportaccess-" + config.toLowerCase() + ":2.3::zip");
		dependencies.implementation("de.m_marvin.serialutility:serialportaccess-" + config.toLowerCase() + ":2.3:headers:zip");
		
	}

	@Override
	public void publishing(MavenPublishTask publish, MavenPublishTask publishLocal, String config) {
		
		publishLocal.coordinates("de.m_marvin.serialutility:virtualserialport-" + config.toLowerCase() + ":" + version);
		
		publishLocal.artifacts.put("drivers", driverZipWinAMD64.archive);
		
		publish.coordinates("de.m_marvin.serialutility:virtualserialport-" + config.toLowerCase() + ":" + version);
		publish.repository(new Repository(
				"GHP [SerialPortAccess]", 
				"https://maven.pkg.github.com/m-marvin/app-serialportutility",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));

		publish.artifacts.put("drivers", driverZipWinAMD64.archive);
		
	}
	
}