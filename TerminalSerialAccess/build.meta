import java.awt.Desktop.Action;
import java.io.File;
import java.lang.reflect.Executable;

import de.m_marvin.metabuild.core.tasks.FileTask;
import de.m_marvin.metabuild.cpp.script.CppMultiTargetBuildScript;
import de.m_marvin.metabuild.maven.Maven;
import de.m_marvin.metabuild.maven.tasks.MavenResolveTask;
import de.m_marvin.metabuild.maven.types.Repository;
import de.m_marvin.metabuild.maven.types.Repository.Credentials;

public class Buildfile extends CppMultiTargetBuildScript {
	
	String version = "2.1";
	
	@Override
	public void init() {
		
		projectName = "terminalserial";

		importBuild("serialportaccess", new File("../SerialPortAccess"));
		
		// Platform windows AMD 64 Client
		var target = makeTarget("WinAMD64", "serial.exe");
		target.compileCpp.compiler = target.linkCpp.linker = "win-amd-64-g++";
		target.compileCpp.define("PLATFORM_WIN");
		target.linkCpp.libraries.add("serialportaccess_x64");
		target.linkCpp.options.add("-static-libgcc");
		target.linkCpp.options.add("-static-libstdc++");
		target.compileCpp.define("BUILD_VERSION", version);

		// Platform linux AMD 64 Client
		target = makeTarget("LinAMD64", "serial");
		target.linkCpp.linker = target.compileCpp.compiler = "lin-amd-64-g++";
		target.compileCpp.define("PLATFORM_LIN");
		target.linkCpp.libraries.add("serialportaccess_x64");
		target.linkCpp.libraries.add("pthread");
		target.compileCpp.options.add("-fno-stack-protector");
		target.linkCpp.options.add("-Wl,-rpath,./");
		target.compileCpp.define("BUILD_VERSION", version);

		// Platform linux ARM 64 Client
		target = makeTarget("LinARM64", "serial");
		target.linkCpp.linker = target.compileCpp.compiler = "lin-arm-64-g++";
		target.compileCpp.define("PLATFORM_LIN");
		target.linkCpp.libraries.add("serialportaccess_arm64");
		target.linkCpp.libraries.add("pthread");
		target.linkCpp.options.add("-Wl,-rpath,./");
		target.compileCpp.define("BUILD_VERSION", version);

		// Platform linux ARM 32 Client
		target = makeTarget("LinARM32", "serial");
		target.linkCpp.linker = target.compileCpp.compiler = "lin-arm-32-g++";
		target.compileCpp.define("PLATFORM_LIN");
		target.linkCpp.libraries.add("serialportaccess_arm32");
		target.linkCpp.libraries.add("pthread");
		target.linkCpp.options.add("-Wl,-rpath,./");
		target.compileCpp.define("BUILD_VERSION", version);

		super.init();
		
	}
	
	@Override
	public TargetConfig makeTarget(String config, String excutableName) {
		var target = super.makeTarget(config, excutableName);
		
		var copyLibs = new FileTask("copyLibs" + config, de.m_marvin.metabuild.core.tasks.FileTask.Action.COPY, target.binaryUnzip.output, new File("../bin/" + config + "/"), true);
		copyLibs.group = "platform";
		copyLibs.dependencyOf(target.build);
		copyLibs.dependsOn(target.binaryUnzip);
		
		target.linkCpp.outputFile = new File("../bin/" + config + "/" + excutableName);

		target.dependencies.dependsOn("serialportaccess:publishMavenLocal");
		
		return target;
	}
	
	@Override
	public void repositories(MavenResolveTask dependencies, String config) {
		
		dependencies.repository(new Repository(
				"GHP [SerialPortAccess]", 
				"https://maven.pkg.github.com/m-marvin/library-serialportaccess",
				new Credentials(
						() -> System.getenv("GITHUB_ACTOR"), 
						() -> System.getenv("GITHUB_TOKEN")
				)
		));
		
		dependencies.repository(Maven.mavenLocal());
		
	}
	
	@Override
	public void dependencies(MavenResolveTask dependencies, String config) {
		
		dependencies.implementation("de.m_marvin.serialportaccess:serialportaccess-" + config + "::zip:2.1");
		dependencies.implementation("de.m_marvin.serialportaccess:serialportaccess-" + config + ":headers:zip:2.1");
		
	}
	
}