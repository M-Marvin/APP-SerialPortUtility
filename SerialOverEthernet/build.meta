import java.io.File;

import de.m_marvin.metabuild.core.tasks.FileTask;
import de.m_marvin.metabuild.core.tasks.FileTask.Action;
import de.m_marvin.metabuild.cpp.script.CppMultiTargetBuildScript;
import de.m_marvin.metabuild.maven.Maven;
import de.m_marvin.metabuild.maven.tasks.MavenResolveTask;

public class Buildfile extends CppMultiTargetBuildScript {
	
	boolean debugging = false; // set to true to compile with debug info
	
	@Override
	public void init() {
		
		projectName = "serialoverethernet";
		
		// Platform windows AMD 64 Client
		var target = makeTarget("WinAMD64", "soe.exe");
		target.compileCpp.compiler = target.linkCpp.linker = "win-amd-64-g++";
		target.compileCpp.define("PLATFORM_WIN");
		if (debugging) {
			target.compileCpp.define("DEBUG_PRINTS");
			target.compileCpp.options.add("-g");
		}
		target.linkCpp.libraries.add("serialportaccess_x64");
		target.linkCpp.libraries.add("netsocket_x64");
		target.linkCpp.options.add("-static-libgcc");
		target.linkCpp.options.add("-static-libstdc++");

		// Platform linux AMD 64 Client
		target = makeTarget("LinAMD64", "soe");
		target.linkCpp.linker = target.compileCpp.compiler = "lin-amd-64-g++";
		target.compileCpp.define("PLATFORM_LIN");
		if (debugging) {
			target.compileCpp.define("DEBUG_PRINTS");
			target.compileCpp.options.add("-g");
		}
		target.linkCpp.libraries.add("serialportaccess_x64");
		target.linkCpp.libraries.add("netsocket_x64");
		target.linkCpp.libraries.add("pthread");
		target.compileCpp.options.add("-fno-stack-protector");

		// Platform linux ARM 64 Client
		target = makeTarget("LinARM64", "soe");
		target.linkCpp.linker = target.compileCpp.compiler = "lin-arm-64-g++";
		target.compileCpp.define("PLATFORM_LIN");
		if (debugging) {
			target.compileCpp.define("DEBUG_PRINTS");
			target.compileCpp.options.add("-g");
		}
		target.linkCpp.libraries.add("serialportaccess_arm64");
		target.linkCpp.libraries.add("netsocket_arm64");
		target.linkCpp.libraries.add("pthread");

		// Platform linux ARM 32 Client
		target = makeTarget("LinARM32", "soe");
		target.linkCpp.linker = target.compileCpp.compiler = "lin-arm-32-g++";
		target.compileCpp.define("PLATFORM_LIN");
		if (debugging) {
			target.compileCpp.define("DEBUG_PRINTS");
			target.compileCpp.options.add("-g");
		}
		target.linkCpp.libraries.add("serialportaccess_arm32");
		target.linkCpp.libraries.add("netsocket_arm32");
		target.linkCpp.libraries.add("pthread");
		
		super.init();
		
	}
	
	@Override
	public TargetConfig makeTarget(String config, String executableName) {
		
		var target = super.makeTarget(config, executableName);
		
		target.linkCpp.outputFile = new File("build/bin/" + config + "/" + executableName);
		
		var copyLibs = new FileTask("copyLibs" + config, Action.COPY, target.binaryUnzip.output, new File("build/bin/" + config), true);
		copyLibs.group = "platform";
		copyLibs.dependsOn(target.binaryUnzip);
		copyLibs.dependencyOf(target.build);
		
		return target;
		
	}
	
	@Override
	public void repositories(MavenResolveTask dependencies, String config) {
		
		dependencies.repository(Maven.mavenLocal());
		
	}
	
	@Override
	public void dependencies(MavenResolveTask dependencies, String config) {
		
		dependencies.implementation("de.m_marvin.serialportaccess:serialportaccess-" + config + "::zip:2.0-SNAPSHOT");
		dependencies.implementation("de.m_marvin.serialportaccess:serialportaccess-" + config + ":headers:zip:2.0-SNAPSHOT");

		dependencies.implementation("de.m_marvin.serialportaccess:netsocket-" + config + "::zip:1.0-SNAPSHOT");
		dependencies.implementation("de.m_marvin.serialportaccess:netsocket-" + config + ":headers:zip:1.0-SNAPSHOT");
		
	}
	
}